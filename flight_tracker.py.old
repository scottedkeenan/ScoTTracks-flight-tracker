import requests
import json
from math import radians, cos, sin, asin, sqrt

import pprint

# import psycopg2
# from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

import mysql.connector

from ogn.client import AprsClient
from ogn.parser import parse, ParseError

# from flight_tracker_postgreser import add_flight, update_flight
from flight_tracker_squirreler import add_flight, update_flight, get_currently_tracked_flights, add_beacon

from datetime import datetime, timezone

# from astral import LocationInfo
# from datetime import datetime
# from astral.sun import sun
# from timezonefinder import TimezoneFinder
# import pytz


DARLTON = {'name': 'Darlton', 'longitude': -0.854433, 'latitude': 53.248563, 'elevation': 47}
UKNHL = {'name': 'DSGC', 'longitude': -0.854433, 'latitude': 53.248563}
PORTMOAK = {'name': 'Portmoak', 'latitude': 56.188496, 'longitude': -3.321460, 'elevation': 109.728}
ROCKTON = {'name': 'Rockton', 'latitude': 43.322222, 'longitude': -80.176389, 'elevation': 258}
RIDEAU = {'name': 'Rideau', 'latitude': 45.100788, 'longitude': -75.632947, 'elevation': 87}
TRUCKEE = {'name': 'Truckee', 'latitude': 39.321262, 'longitude': -120.139830, 'elevation': 1799}
SYERSTON = {'name': 'Syerston', 'latitude': 53.024159, 'longitude': -0.911710, 'elevation': 69}
MINDEN = {'name': 'Minden', 'latitude': 32.646111, 'longitude': -93.298056, 'elevation': 85}
WINNIPEG = {'name': 'Winnipeg', 'latitude': 49.705749, 'longitude': -97.680345, 'elevation': 914}
LASHAM = {'name': 'Lasham', 'latitude': 51.186965, 'longitude': -1.033020, 'elevation': 188}

# timezone debug
# BEIJING = {'name': 'Beijing', 'latitude': 39.916668, 'longitude': 116.383331, 'elevation': 188}

tracked_airfield = SYERSTON

AIRCRAFT_DATA_TEMPLATE = {
    'airfield': None,
    'address': None,
    'address_type': None,
    'altitude': None,
    'ground_speed': None,
    'receiver_name': None,
    'reference_timestamp': None,
    'registration': None,
    'takeoff_timestamp': None,
    'landing_timestamp': None,
    'status': None,

    'tracking_launch_height': False,
    'tracking_launch_start_time': None,
    'launch_height': None,
}


def make_database_connection():
    conn = mysql.connector.connect('creds')
    return conn


def import_device_data():
    device_data = requests.get('http://ddb.glidernet.org/download/').text

    device_dict = {}

    for line in device_data.splitlines():
        if line[0] == '#':
            continue
        else:
            split_line = line.split(',')
            device_dict[split_line[1].strip("'")] = split_line[3].strip("'")

    with open('ogn-ddb.json', 'w') as ddb_data:
        ddb_data.write(json.dumps(device_dict))

    return device_dict


def haversine(lon1, lat1, lon2, lat2):
    """
    Calculate the great circle distance between two points
    on the earth (specified in decimal degrees)
    """
    # convert decimal degrees to radians
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    # haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
    c = 2 * asin(sqrt(a))
    r = 6371  # Radius of earth in kilometers. Use 3956 for miles
    return c * r


# def utc_to_local(utc_dt):
#     return utc_dt.replace(tzinfo=timezone.utc).astimezone(tz=None)


# def get_airfield_timezone(airfield_data):
#     tf = TimezoneFinder()
#     return tf.timezone_at(lng=airfield_data['longitude'], lat=airfield_data['latitude'])
#
#
# def get_airfield_time(airfield_data):
#     airfield_tz = pytz.timezone(get_airfield_timezone(airfield_data))
#     return datetime.now(airfield_tz)
#
#
# def get_airfield_sunset(airfield_data):
#     city = LocationInfo(timezone=get_airfield_timezone(airfield_data),
#                         latitude=airfield_data['latitude'],
#                         longitude=airfield_data['longitude'])
#     s = sun(city.observer, date=get_airfield_time(airfield_data), tzinfo=city.timezone)
#     sunset = s['sunset']
#     return sunset
#
#
# def has_airfield_sun_set(airfield_data):
#     airfield_current = get_airfield_time(airfield_data)
#     airfield_sunset = get_airfield_sunset(airfield_data)
#     get_airfield_sunset(airfield_data)
#     if airfield_current > airfield_sunset:
#         print("night!")
#         print("{} > {}".format(airfield_current, airfield_sunset))
#         return True
#     print("Day!")
#     print("{} !> {}".format(airfield_current, airfield_sunset))
#     return False


def track_aircraft(beacon, airfield, distance):
    # if not has_airfield_sun_set(tracked_airfield):
    #     quit()

    db_conn = make_database_connection()
    add_beacon(db_conn.cursor(), beacon)
    db_conn.close()

    try:
        with open('ogn-ddb.json') as ogn_ddb:
            device_dict = json.load(ogn_ddb)
    except IOError:
        device_dict = import_device_data()

    try:
        registration = device_dict[beacon['address']]
    except KeyError:
        registration = 'UNKNOWN'

    # print('Received {aprs_type} for {registration}. Speed: {ground_speed}, Altitude: {altitude}'.format(
    #     location=airfield['name'], registration=registration, **beacon))

    # print('Received {aprs_type} for {registration} {distance} km from {location}. Speed: {ground_speed}, Altitude: {altitude}'.format(
    #     location=airfield['name'], registration=registration, distance=distance, **beacon))

    # import pprint
    # print('BEACON++++++++++++++++++++')
    # pprint.pprint(beacon)
    # print('++++++++++++++++++++')

    if beacon['address'] in tracked_aircraft.keys():
        #Remove outdated tracking
        if datetime.date(tracked_aircraft[beacon['address']]['reference_timestamp']) < datetime.today().date():
            tracked_aircraft.pop(beacon['address'])
            print("Removed outdated tracking for: {}".format(beacon['address']))
        else:
            print('Tracking checked and is up to date')

    if beacon['address'] not in tracked_aircraft.keys():
        print('Aircraft not tracked yet')
        new_aircraft = AIRCRAFT_DATA_TEMPLATE.copy()

        new_aircraft['airfield'] = airfield['name']
        new_aircraft['address'] = beacon['address']
        new_aircraft['address_type'] = beacon['address_type']
        new_aircraft['altitude'] = beacon['altitude']
        new_aircraft['ground_speed'] = beacon['ground_speed']
        new_aircraft['receiver_name'] = beacon['receiver_name']
        new_aircraft['reference_timestamp'] = beacon['reference_timestamp']  # .strftime("%m/%d/%Y, %H:%M:%S")
        new_aircraft['registration'] = registration

        if beacon['ground_speed'] > 30 and beacon['altitude'] - airfield['elevation'] > 200:
            new_aircraft['status'] = 'air'
        else:
            new_aircraft['status'] = 'ground'
        print("Starting to track aircraft ".format(registration))
        tracked_aircraft[beacon['address']] = new_aircraft
        print(new_aircraft)
        db_conn = make_database_connection()
        add_flight(db_conn.cursor(), new_aircraft)
        print(db_conn.commit())

    if beacon['ground_speed'] > 30 and beacon['altitude'] - airfield['elevation'] > 200:
        print("airborne aircraft detected")
        aircraft = tracked_aircraft[beacon['address']]

        aircraft['altitude'] = beacon['altitude']
        aircraft['ground_speed'] = beacon['ground_speed']
        aircraft['receiver_name'] = beacon['receiver_name']
        aircraft['reference_timestamp'] = beacon['reference_timestamp']  # .strftime("%m/%d/%Y, %H:%M:%S")

        if aircraft['tracking_launch_height']:
            print("aircraft: ", aircraft)
            print("beacon: ", beacon)
            time_since_launch = (beacon['timestamp'] - aircraft['tracking_launch_start_time']).total_seconds()
            if beacon['altitude'] - airfield['elevation'] > aircraft['launch_height']:
                aircraft['launch_height'] = beacon['altitude'] - airfield['elevation']
            if time_since_launch >= 40:
                print("Updating aircraft {} launch height".format(aircraft['registration']))
                print(aircraft)
                db_conn = make_database_connection()
                update_flight(db_conn.cursor(), aircraft)
                print(db_conn.commit())

                aircraft['tracking_launch_height'] = False

        if aircraft['status'] == 'ground':
            aircraft['status'] = 'air'
            aircraft['takeoff_timestamp'] = beacon['timestamp']  # .strftime("%m/%d/%Y, %H:%M:%S")
            print("Adding aircraft {} as launched".format(registration))

            aircraft['tracking_launch_height'] = True
            aircraft['tracking_launch_start_time'] = beacon['timestamp']
            aircraft['launch_height'] = beacon['altitude'] - airfield['elevation']

            print(aircraft)
            db_conn = make_database_connection()
            add_flight(db_conn.cursor(), aircraft)
            print(db_conn.commit())
    elif beacon['ground_speed'] < 30 and beacon['altitude'] - airfield['elevation'] < 300:
        print("landed aircraft detected")
        aircraft = tracked_aircraft[beacon['address']]

        aircraft['altitude'] = beacon['altitude']
        aircraft['ground_speed'] = beacon['ground_speed']
        aircraft['receiver_name'] = beacon['receiver_name']
        aircraft['reference_timestamp'] = beacon['reference_timestamp'] # .strftime("%m/%d/%Y, %H:%M:%S")
        # aircraft['timestamp'] = beacon['timestamp']

        if aircraft['status'] == 'air':
            aircraft['status'] = 'ground'
            aircraft['landing_timestamp'] = beacon['timestamp']  # .strftime("%m/%d/%Y, %H:%M:%S"))
            # if aircraft in DB
            print("Updating aircraft {} as landed".format(registration))
            print(aircraft)
            db_conn = make_database_connection()
            update_flight(db_conn.cursor(), aircraft)
            print(db_conn.commit())
            tracked_aircraft.pop(aircraft['address'])
            # else add flight (landout)

    print('Tracked aircraft =========================')
    pprint.pprint(tracked_aircraft)
    print('End Tracked aircraft', len(tracked_aircraft), '======================')


def get_distance_from_location(beacon, beacon_location):
    distance = haversine(
        beacon['longitude'],
        beacon['latitude'],
        beacon_location['longitude'],
        beacon_location['latitude']
    )
    return distance


def process_beacon(raw_message):
    try:
        beacon = parse(raw_message)
        # if 'aircraft_type' in beacon.keys():
        try:
            if beacon['beacon_type'] == 'aprs_aircraft':
                # locations = [SYERSTON]
                # for location in locations:
                distance = get_distance_from_location(beacon, tracked_airfield)
                #     if distance < 3.21869:
                # pprint.pprint(beacon)
                track_aircraft(beacon, tracked_airfield, distance)
        except KeyError:
            print('beacon_type not field not found')
            print(beacon)
    except ParseError as e:
        print('Error, {}'.format(e.message))


print("Checking database for active flights")
db_conn = make_database_connection()
database_flights = get_currently_tracked_flights(db_conn.cursor())


tracked_aircraft = {}

for flight in database_flights:
    db_flight = AIRCRAFT_DATA_TEMPLATE.copy()
    db_flight['airfield'] = flight[1]
    db_flight['address'] = flight[2]
    db_flight['address_type'] = flight[3]
    db_flight['altitude'] = flight[4]
    db_flight['ground_speed'] = flight[5]
    db_flight['receiver_name'] = flight[6]
    db_flight['reference_timestamp'] = flight[7]
    db_flight['registration'] = flight[8]
    db_flight['takeoff_timestamp'] = flight[9]
    db_flight['landing_timestamp'] = flight[10]
    db_flight['status'] = flight[11]
    db_flight['tracking_launch_height'] = flight[13]
    db_flight['tracking_launch_start_time'] = flight[14]
    db_flight['launch_height'] = flight[12]

    tracked_aircraft[db_flight['address']] = db_flight

print("=========")
print(tracked_aircraft)
print("=========")

# if not has_airfield_sun_set(tracked_airfield):
client = AprsClient(aprs_user='N0CALL', aprs_filter="r/{latitude}/{longitude}/5".format(**tracked_airfield))
client.connect()
try:
    client.run(callback=process_beacon, autoreconnect=True)
except KeyboardInterrupt:
    print('\nStop ogn gateway')
    client.disconnect()

